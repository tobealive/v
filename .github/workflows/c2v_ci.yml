name: C2V apps

on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string
      cc:
        description: 'The compiler used in the calling workflow to restore the V cache'
        required: true
        type: string
      vflags:
        required: true
        type: string

env:
  VFLAGS: ${{ inputs.vflags }}

jobs:
  build-doom:
    if: github.event_name != 'push' || github.event.ref == 'refs/heads/master' || github.event.repository.full_name != 'vlang/v'
    runs-on: ${{ inputs.os }}
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - name: Restore cache
        uses: actions/cache/restore@v3
        with:
          path: ./
          key: ${{ runner.os }}-${{ inputs.cc }}-${{ github.sha }}
          fail-on-cache-miss: true
      - name: Symlink V
        run: ./v symlink -githubci
      - name: Install C2V
        run: |
          v install --git https://github.com/vlang/c2v
          v -g ~/.vmodules/c2v/ || true
      - name: Install dependencies
        run: |
          if [ "${{ runner.os }}" == "Linux" ]; then
            sudo apt update
            sudo apt install -y -qq libsdl2-dev libsdl2-mixer-dev libsdl2-net-dev libpng-dev libsamplerate0-dev
          else
            brew install sdl2 sdl2_mixer sdl2_net libpng libsamplerate
          fi
      - name: Build original Chocolate Doom
        run: |
          git clone --quiet --depth 1 https://github.com/vlang/doom ~/code/doom
          cd ~/code/doom/chocolate-doom
          cmake -DCMAKE_BUILD_TYPE=Debug .
          make chocolate-doom
      - name: Translate the whole game in project/folder mode and compile it
        run: |
          touch ~/DOOM1.WAD
          WAD_FILE=~/DOOM1.WAD ~/code/doom/build_whole_project.sh

  test-regression:
    if: contains(inputs.os, 'ubuntu') && (github.event_name != 'push' || github.event.ref == 'refs/heads/master' || github.event.repository.full_name != 'vlang/v')
    runs-on: ${{ inputs.os }}
    timeout-minutes: 20
    env:
      VFLAGS: -cc tcc
      DISPLAY: :99
      LIBGL_ALWAYS_SOFTWARE: true
      VTMP: /tmp
    steps:
      - uses: actions/checkout@v4
      - name: Restore cache
        uses: actions/cache/restore@v3
        with:
          path: ./
          key: ${{ runner.os }}-${{ inputs.cc }}-${{ github.sha }}
          fail-on-cache-miss: true
      - name: Symlink V
        run: ./v symlink -githubci
      - name: Install C2V
        run: |
          v install --git https://github.com/vlang/c2v
          v -g ~/.vmodules/c2v/ || true
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y -qq libsdl2-dev libsdl2-mixer-dev libsdl2-net-dev libpng-dev libsamplerate0-dev
          # c2v / DOOM dependencies
          # vgret dependencies
          # imagemagick              : convert, mogrify, import
          # xvfb                     : For starting X11 Virtual FrameBuffers
          # openimageio-tools        : idiff
          # libgl1-mesa-dri          : For headless rendering / software DRI driver (LIBGL_ALWAYS_SOFTWARE=true)
          # freeglut3-dev            : Fixes graphic apps compilation with tcc
          sudo apt install imagemagick openimageio-tools freeglut3-dev libgl1-mesa-dri xvfb xsel xclip
      - name: Setup test tools
        run: |
          # Fetch the free ~4MB DOOM1.WAD from the link at https://doomwiki.org/wiki/DOOM1.WAD
          wget https://distro.ibiblio.org/slitaz/sources/packages/d/doom1.wad -O ~/doom1.wad
          # Get imgur upload script
          wget https://raw.githubusercontent.com/tremby/imgur.sh/c98345d/imgur.sh
          chmod +x ./imgur.sh
          # Get regression images to test against
          git clone https://github.com/Larpon/doom-regression-images
      - name: Build original Chocolate Doom
        run: |
          git clone --quiet --depth 1 https://github.com/vlang/doom ~/code/doom
          cd ~/code/doom/chocolate-doom
          cmake -DCMAKE_BUILD_TYPE=Debug .
          make chocolate-doom
      - name: Translate the whole game in project/folder mode
        run: WAD_FILE=~/doom1.wad ~/code/doom/build_whole_project.sh
      - name: Sample and compare with vgret
        id: compare
        continue-on-error: true
        run: |
          Xvfb $DISPLAY -screen 0 800x600x24 -fbdir /var/tmp/ &
          sleep 1; while [ ! -f /var/tmp/Xvfb_screen0 ]; do sleep 0.5; done # give xvfb time to start, even on slow CI runs
          sleep 1; v gret -r ~/code/doom -t ./doom-regression-images/vgret.doom.toml -v ./doom-sample_images ./doom-regression-images
      - name: Upload regression to imgur
        if: steps.compare.outcome != 'success'
        run: |
          ./imgur.sh /tmp/fail.png
          ./imgur.sh /tmp/diff.png
          exit 1
