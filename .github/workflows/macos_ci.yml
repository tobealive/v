name: CI macOS

on:
  workflow_call:

env:
  VFLAGS: -cc clang
  PKG_CONFIG_PATH: /usr/local/opt/pkgconfig:/usr/local/opt/libpq/lib/pkgconfig:/usr/local/opt/openssl@3/lib/pkgconfig:/opt/homebrew/lib/pkgconfig:/opt/homebrew/opt/libpq/lib/pkgconfig:/opt/homebrew/opt/openssl@3/lib/pkgconfig
  CACHE_ID: macOS-clang-${{ github.sha }} # the os prefix is equivalent to the RUNNER_OS variable

jobs:
  build:
    runs-on: macos-12
    if: github.event_name != 'push' || github.event.ref == 'refs/heads/master' || github.event.repository.full_name != 'vlang/v'
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          echo "PKG_CONFIG_PATH is '$PKG_CONFIG_PATH'"
          brew install libpq openssl
          export LIBRARY_PATH="$LIBRARY_PATH:/usr/local/opt/openssl/lib/"
          echo "LIBRARY_PATH is '$LIBRARY_PATH'"
      - name: Build V
        run: make -j4 && ./v -showcc -cg -cstrict -o v cmd/v
      - name: Run sanitizers
        run: |
          ./v -o v2 cmd/v -cflags -fsanitize=undefined
          UBSAN_OPTIONS=print_stacktrace=1:halt_on_error=1 ./v2 -o v.c cmd/v
      - name: Build V using V
        run: ./v -o v2 cmd/v && ./v2 -o v3 cmd/v
      - name: Test symlink
        run: ./v symlink
      # - name: Set up pg database
      #   run: |
      #     pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start
      #     psql -d postgres -c 'select rolname from pg_roles'
      #     psql -d postgres -c 'create database customerdb;'
      #     psql -d customerdb -f examples/database/pg/mydb.sql
      # - name: Test v->c
      #   run: ./v test-all
      # - name: Test v binaries
      #   run: ./v build-vbinaries
      # - name: Test v->js
      #   run: ./v -o hi.js examples/hello_v_js.v && node hi.js
      - name: Cache
        uses: actions/cache/save@v3
        with:
          path: ./
          key: ${{ env.CACHE_ID }}

  verify:
    needs: build
    runs-on: macos-12
    steps:
      - name: Restore cache
        uses: actions/cache/restore@v3
        with:
          path: ./
          key: ${{ env.CACHE_ID }}
          fail-on-cache-miss: true
      - name: Print System and Environment Info
        run: ./v doctor
      - name: Self compile
        run: |
          ./v -d debug_malloc -d debug_realloc -o v cmd/v
          ./v -o v2 cmd/v && ./v2 -o v3 cmd/v && ./v3 -o v4 cmd/v
          # Test v -realloc arena allocation
          ./v -o vrealloc -prealloc cmd/v && ./vrealloc -o v3 cmd/v && ./v3 -o v4 cmd/v
          # Test self compilation with -skip-unused
          ./v -skip-unused -o v2 cmd/v && ./v2 -skip-unused -o v3 cmd/v && ./v3 -skip-unused -o v4 cmd/v
      - name: Verify `v test` works
        run: |
          ./v cmd/tools/test_if_v_test_system_works.v
          ./cmd/tools/test_if_v_test_system_works
      - name: Test pure V math module
        run: ./v -exclude @vlib/math/*.c.v test vlib/math/

  fmt:
    needs: build
    runs-on: macos-12
    steps:
      - name: Restore cache
        uses: actions/cache/restore@v3
        with:
          path: ./
          key: ${{ env.CACHE_ID }}
          fail-on-cache-miss: true
      - name: Test fmt
        run: VJOBS=1 ./v test-fmt
      - name: Test cleancode
        run: VJOBS=1 ./v test-cleancode

  test-self:
    needs: verify
    runs-on: macos-12
    steps:
      - name: Restore cache
        uses: actions/cache/restore@v3
        with:
          path: ./
          key: ${{ env.CACHE_ID }}
          fail-on-cache-miss: true
      - name: Self tests
        run: VJOBS=1 ./v test-self

  test-other:
    needs: verify
    runs-on: macos-12
    steps:
      - name: Restore cache
        uses: actions/cache/restore@v3
        with:
          path: ./
          key: ${{ env.CACHE_ID }}
          fail-on-cache-miss: true
      - name: Build V binaries
        run: ./v build-vbinaries
      - name: Build benches
        run: ./v should-compile-all vlib/v/tests/bench/
      - name: Build option_test.v with -autofree
        run: ./v -autofree vlib/v/tests/option_test.v
      - name: Test password input
        run: ./v test examples/password/
      - name: Test readline
        run: ./v test examples/readline/

  examples-and-modules:
    needs: verify
    uses: ./.github/workflows/examples_and_modules_ci.yml
    with:
      os: macos-12
      cc: clang
      vflags: -cc clang

  apps-and-libraries:
    needs: verify
    uses: ./.github/workflows/apps_and_libraries_ci.yml
    with:
      os: macos-12
      cc: clang
      vflags: -cc clang

  c2v:
    needs: verify
    uses: ./.github/workflows/c2v_ci.yml
    with:
      os: macos-12
      cc: clang
      VFLAGS: -cc clang

  # NOTE:
  # sanitize for more paths
  # examples on mac
  # more uniform coverage for platforms
  # sanitized msvc
  # below 1h instead of 2h+
  # cstrict test with tcc
  # re-enalbes native example
  # re-enable V UI example compilation
  # removes cancel workflow as workflows are in the same concurrency group and will be automatically cancelled by github
  # `make -j4` where missing
  # format all yml files
  # VFLAGS: -cc tcc TODO: sanitized gcc instead of tcc test if it works with gcc and linking
  # TODO: run cis on success where appropriate
  # TODO: setup, dependencies ones before running on linux than start workflows? Test if this is suitable, ok if not
  # TODO: LATER
  # Further shorten tests, prioritize tests, than run modules
