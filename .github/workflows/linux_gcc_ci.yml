name: CI Linux (GCC)

on:
  workflow_call:

env:
  VFLAGS: -cc gcc
  CACHE_ID: linux-gcc-${{ github.sha }}

jobs:
  build:
    runs-on: ubuntu-20.04
    if: github.event_name != 'push' || github.event.ref == 'refs/heads/master' || github.event.repository.full_name != 'vlang/v'
    steps:
      - uses: actions/checkout@v4
      - name: Setup Dependencies
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: postgresql libpq-dev libssl-dev sqlite3 libsqlite3-dev valgrind libfreetype6-dev libxi-dev libxcursor-dev libgl-dev
          version: 1.0
      - name: Build V
        run: |
          echo ${{ github.workflow }}
          echo $GITHUB_WORKFLOW
          make -j4 && ./v -showcc -cg -cstrict -o v cmd/v
      - name: Valgrind v.c
        run: valgrind --error-exitcode=1 ./v -o v.c cmd/v
      - name: Run sanitizers
        run: |
          # TODO: trying linking to fix gcc santized test
          # ./v -o v2 cmd/v -cflags -fsanitize=thread
          # ./v -o v3 cmd/v -cflags "-fsanitize=undefined -fno-sanitize=alignment"
          ./v -cc tcc -o v2 cmd/v -cflags -fsanitize=thread
          ./v -cc tcc -o v3 cmd/v -cflags "-fsanitize=undefined -fno-sanitize=alignment"
          UBSAN_OPTIONS=print_stacktrace=1:halt_on_error=1 ./v2 -o v.c cmd/v
          UBSAN_OPTIONS=print_stacktrace=1:halt_on_error=1 ./v3 -o v.c cmd/v
      - name: Cache
        uses: actions/cache/save@v3
        with:
          path: ./
          key: ${{ env.CACHE_ID }}

  verify:
    needs: build
    runs-on: ubuntu-20.04
    steps:
      - name: Restore cache
        uses: actions/cache/restore@v3
        with:
          path: ./
          key: ${{ env.CACHE_ID }}
          fail-on-cache-miss: true
      - name: Self compile
        run: ./v -o v2 cmd/v && ./v2 -o v3 cmd/v && ./v3 -o v4 cmd/v
      - name: Test freestanding
        run: ./v -freestanding run vlib/os/bare/bare_example_linux.v
      - name: Verify `v test` works
        run: |
          echo $VFLAGS
          ./v cmd/tools/test_if_v_test_system_works.v
          ./cmd/tools/test_if_v_test_system_works
      - name: Test pure V math module
        run: ./v -exclude @vlib/math/*.c.v test vlib/math/
      # - name: Test V
      #   run: ./v test-all

  fmt:
    needs: build
    runs-on: ubuntu-20.04
    steps:
      - name: Restore cache
        uses: actions/cache/restore@v3
        with:
          path: ./
          key: ${{ env.CACHE_ID }}
          fail-on-cache-miss: true
      - name: Test fmt
        run: ./v test-fmt
      - name: Test cleancode
        run: ./v test-cleancode

  test:
    needs: verify
    runs-on: ubuntu-20.04
    timeout-minutes: 90
    strategy:
      matrix:
        optimization: ['', '-prod', '-cstrict']
        include:
          - optimization: '-cstrict'
            env: 'VTEST_JUST_ESSENTIAL=1 V_CI_CSTRICT=1'
      fail-fast: false
    steps:
      - name: Restore cache
        uses: actions/cache/restore@v3
        with:
          path: ./
          key: ${{ env.CACHE_ID }}
          fail-on-cache-miss: true
      - name: Setup Dependencies
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: postgresql libpq-dev libssl-dev sqlite3 libsqlite3-dev valgrind libfreetype6-dev libxi-dev libxcursor-dev libgl-dev
          version: 1.0
      - name: Self Test
        run: |
          if [ "${{ matrix.optimization }}" == "-prod" ]; then
            ./v -o vprod -prod cmd/v
            ./vprod test-self
          else
            ${{ matrix.env }} ./v ${{ matrix.optimization }} test-self
          fi

  # TODO:
  # build-modules:
  #   needs: verify
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - name: Restore cache
  #       uses: actions/cache/restore@v3
  #       with:
  #         path: ./
  #         key: ${{ env.CACHE_ID }}
  #         fail-on-cache-miss: true
  #     - name: Setup Dependencies
  #       uses: awalsh128/cache-apt-pkgs-action@latest
  #       with:
  #         packages: postgresql libpq-dev libssl-dev sqlite3 libsqlite3-dev valgrind libfreetype6-dev libxi-dev libxcursor-dev libgl-dev
  #         version: 1.0
  #     # - name: Test v binaries
  #     #   run: ./v build-vbinaries
  #     # - name: Test v->js
  #     #   run: ./v -o hi.js examples/hello_v_js.v && node hi.js
  #     # - name: Build Vorum
  #     #   run: git clone --depth 1 https://github.com/vlang/vorum && cd vorum && ../v . && cd ..
  #     - name: Build option_test.v with -autofree
  #       run: ./v -autofree vlib/v/tests/option_test.v
  #     - name: Self compile with -parallel-cc
  #       run: ./v -o v2 -parallel-cc cmd/v

  examples-and-modules:
    needs: verify
    uses: ./.github/workflows/examples_and_modules_ci.yml
    with:
      os: ubuntu-20.04
      cc: gcc
      vflags: -cc gcc

  apps-and-libraries:
    needs: verify
    uses: ./.github/workflows/apps_and_libraries_ci.yml
    with:
      os: ubuntu-20.04
      cc: gcc
      vflags: -cc gcc
      vinix: true

  san-test:
    needs: verify
    runs-on: ubuntu-20.04
    timeout-minutes: 120
    env:
      VTEST_SHOW_START: 1
      VJOBS: 1
    strategy:
      matrix:
        sanitizer: ['undefined', 'address']
      fail-fast: false
    steps:
      - name: Restore cache
        uses: actions/cache/restore@v3
        with:
          path: ./
          key: ${{ env.CACHE_ID }}
      - name: Setup Dependencies
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: postgresql libpq-dev libssl-dev sqlite3 libsqlite3-dev valgrind libfreetype6-dev libxi-dev libxcursor-dev libgl-dev
          version: 1.0
      - name: Build V # Use a V binary that was compiled with a sanitizer to run self tests.
        run: ./v -cflags -fsanitize=${{ matrix.sanitizer }} -o v2 cmd/v
      - name: Self tests
        run: |
          if [ "${{ matrix.sanitizer }}" == "address" ]; then
            ASAN_OPTIONS=detect_leaks=0 ./v2 -cc tcc test-self -asan-compiler
          else
            ./v2 -cflags -fsanitize=${{ matrix.sanitizer }} test-self
          fi

  san-build-modules:
    needs: verify
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        sanitizer: ['undefined', 'address']
        include:
          - optimization: 'address'
            env: 'ASAN_OPTIONS=detect_leaks=0'
    steps:
      - name: Restore cache
        uses: actions/cache/restore@v3
        with:
          path: ./
          key: ${{ env.CACHE_ID }}
          fail-on-cache-miss: true
      - name: Setup Dependencies
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: postgresql libpq-dev libssl-dev sqlite3 libsqlite3-dev valgrind libfreetype6-dev libxi-dev libxcursor-dev libgl-dev
          version: 1.0
      - name: Build V # Use a V binary that was compiled with a sanitizer to build examples.
        run: ./v -cflags -fsanitize=${{ matrix.sanitizer }} -o v cmd/v
      - name: Build Examples
        run: ${{ matrix.env }} ./v build-examples

  # TODO: remove comment
  # tests-sanitize-address-gcc:
  #   runs-on: ubuntu-20.04
  #   timeout-minutes: 240
  #     VJOBS: 1
  #     VTEST_SHOW_START: 1
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Install dependencies
  #       run: |
  #         sudo apt update
  #         sudo apt install -y -qq postgresql libpq-dev libssl-dev sqlite3 libsqlite3-dev valgrind
  #         sudo apt install -y -qq libfreetype6-dev  libxi-dev libxcursor-dev libgl-dev
  #     - name: Build V
  #       run: make -j4 && ./v -cg -cstrict -o v cmd/v
  #     - name: Self tests (-fsanitize=address)
  #       run: ASAN_OPTIONS=detect_leaks=0 ./v -cflags -fsanitize=address test-self
  #     - name: Self tests (V compiled with -fsanitize=address)
  #       run:
  #         ./v -cflags -fsanitize=address,pointer-compare,pointer-subtract -o v cmd/v &&
  #         ASAN_OPTIONS=detect_leaks=0 ./v -cc tcc test-self -asan-compiler
  #     - name: Build examples (V compiled with -fsanitize=address)
  #       run: ASAN_OPTIONS=detect_leaks=0 ./v build-examples

  # TODO: fix autofree compilation
  # autofree-selfcompile:
  #   runs-on: ubuntu-20.04
  #   # if: github.event_name != 'push' || github.event.ref == 'refs/heads/master' || github.event.repository.full_name != 'vlang/v'
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Build V
  #       run: make -j4
  #     - name: V self compilation with -autofree
  #       run: ./v -o v2 -autofree cmd/v && ./v2 -o v3 -autofree cmd/v && ./v3 -o v4 -autofree cmd/v

  # TODO: fix musl compilation
  # musl:
  #   runs-on: ubuntu-20.04
  #   # if: github.event_name != 'push' || github.event.ref ==
