name: Build binary artifacts

on:
  workflow_dispatch:
  pull_request:
    paths:
      - '**/binary_artifact.yml'
  push:
    paths:
      - '**/binary_artifact.yml'
    tags:
      - weekly.**
      - 0.**

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref_type != 'tag' }}

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-13, macos-14, windows-latest]
        include:
          - os: ubuntu-20.04
            cc: gcc
          - os: ubuntu-20.04
            target: linux
            artifact: v_linux.zip
          - os: macos-13
            cc: clang
          - os: macos-13
            target: macos_x86_64
            artifact: v_macos_x86_64.zip
          - os: macos-14
            cc: clang
          - os: macos-14
            target: macos_arm64
            artifact: v_macos_arm64.zip
          - os: macos-14
            cflags: -cflags "-target arm64-apple-darwin"
          - os: windows-latest
            cc: msvc
            target: windows
            artifact: v_windows.zip
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - name: Compile release binaries
        if: runner.os != 'Windows'
        run: |
          make
          ./v -cc ${{ matrix.cc }} ${{ matrix.cflags }} -skip-unused -prod -o v cmd/v
          ./v -cc ${{ matrix.cc }} ${{ matrix.cflags }} -skip-unused -prod cmd/tools/vup.v
          ./v -cc ${{ matrix.cc }} ${{ matrix.cflags }} -skip-unused -prod cmd/tools/vdoctor.v
      - name: Compile release binaries (Windows)
        if: runner.os == 'Windows'
        run: |
          ./make.bat -msvc
          ./v -skip-unused -prod -cc msvc -o cmd/vprod.exe cmd/v
          ./v -skip-unused -prod -cc msvc cmd/tools/vup.v
          ./v -skip-unused -prod -cc msvc cmd/tools/vdoctor.v
          del *.exe
          move cmd/vprod.exe v.exe
      - name: Prepare artifact
        shell: bash
        run: |
          if [[ ${{ matrix.os }} == 'macos-14' ]]; then
            rm -rf thirdparty/tcc
            git clone --branch thirdparty-macos-arm64 --depth=1 https://github.com/vlang/tccbin thirdparty/tcc
          fi
          # Remove excluded
          if [[ $RUNNER_OS == 'Windows' ]]; then
            find . -type f \( -name "*.ilk" -o -name "*.pdb" \) -exec rm -rf {} +
            rm -rf v_old.exe
          fi
          find . -type d -name ".git" -exec rm -rf {} +
          rm -rf vc/
          rm -rf v_old
          rm -rf vlib/v/tests/bench/gcboehm/*.svg
      - name: Create ZIP archive
        shell: bash
        run: |
          cd ..
          if [[ $RUNNER_OS == 'Windows' ]]; then
            7z a -tzip ${{ matrix.artifact }} v/
          else
            zip -r9 --symlinks ${{ matrix.artifact }} v/
          fi
          zipinfo ${{ matrix.artifact }}
          mv ${{ matrix.artifact }} v/
          cd v/
      - name: Create artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: ${{ matrix.artifact }}

  release:
    name: Create Github Release
    if: github.ref_type == 'tag'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          commit: ${{ github.sha }}
          draft: false
          prerelease: false

  publish:
    if: github.ref_type == 'tag'
    needs: release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: [windows, linux, macos_arm64, macos_x86_64]
    steps:
      - uses: actions/checkout@v4
      - name: Fetch artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.version }}
          path: ./${{ matrix.version }}
      - name: Get release
        id: get_release_info
        uses: leahlundqvist/get-release@v1.3.1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag_name: ${{ github.ref_name }}
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ${{ matrix.version }}/v_${{ matrix.version }}.zip
          asset_name: v_${{ matrix.version }}.zip
          asset_content_type: application/zip
