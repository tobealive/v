name: Build binary artifacts

on:
  pull_request:
    paths:
      - '**/binary_artifact.yml'
  push:
    paths:
      # TODO: remove
      - '**/binary_artifact.yml'
    # tags:
    #   - weekly.**
    #   - 0.**

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref_name != 'master' }}

jobs:
  build-nix:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-13, macos-14]
        include:
          - os: ubuntu-20.04
            cc: gcc
          - os: ubuntu-20.04
            artifact: v_linux
          - os: macos-13
            cc: clang
          - os: macos-13
            artifact: v_macos_x86_64
          - os: macos-14
            cc: clang
          - os: macos-14
            artifact: v_macos_arm64
          - os: macos-14
            cflags: -cflags -target arm64-apple-darwin
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Get short tag name
        if: runner.os == 'Linux'
        uses: winterjung/split@v2
        id: split
        with:
          msg: ${{ github.ref }}
          separator: /
      - run: |
          echo "SPLIT=${{ steps.split.outputs._2 }}"
          echo "REF_NAME=${{ github.ref_name }}"

      - name: Compile release binaries
        run: |
          make
          ./v -cc ${{ matrix.cc }} ${{ matrix.cflags }} -skip-unused -prod -o v cmd/v
          ./v -cc ${{ matrix.cc }} ${{ matrix.cflags }} -skip-unused -prod cmd/tools/vup.v
          ./v -cc ${{ matrix.cc }} ${{ matrix.cflags }} -skip-unused -prod cmd/tools/vdoctor.v
      - name: Get correct TCC for ARM64
        if: matrix.os == 'macos-14'
        run: |
          rm -rf thirdparty/tcc
          git clone --branch thirdparty-macos-arm64 --depth=1 https://github.com/vlang/tccbin thirdparty/tcc
      - name: Remove excluded
        run: rm -rf **/.git/ vc/ v_old vlib/v/tests/bench/gcboehm/*.svg
      - name: Create ZIP archive
        run: |
          cd ..
          zip -r9 --symlinks ${{ matrix.artifact }}.zip v/
          zipinfo ${{ matrix.artifact }}.zip
          mv ${{ matrix.artifact }}.zip v/
          cd v/
      - name: Create artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: ${{ matrix.artifact }}.zip

  build-windows:
    runs-on: windows-latest
    env:
      CC: msvc
      ZIPNAME: v_windows.zip
    steps:
      - uses: actions/checkout@v4
      - name: Compile release binaries
        run: |
          ./make.bat -msvc
          ./v -skip-unused -prod -cc msvc -o cmd/vprod.exe cmd/v
          del *.exe
          move cmd\vprod.exe v.exe
          ./v -skip-unused -prod -cc msvc cmd\tools\vup.v
          ./v -skip-unused -prod -cc msvc cmd\tools\vdoctor.v
      - name: Remove excluded
        shell: bash
        run: rm -rf **/.git/ vc/ v_old.exe vlib/v/tests/bench/gcboehm/*.svg
      - name: Create archive
        shell: bash
        run: |
          cd ..
          7z a -tzip $ZIPNAME v
          zipinfo $ZIPNAME
          mv $ZIPNAME v/
          cd v/
      - name: Create artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows
          path: ${{ env.ZIPNAME }}

  release:
    name: Create Github Release
    if: github.ref_type == 'tag'
    needs: [build-nix, build-windows]
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          commit: ${{ github.sha }}
          draft: false
          prerelease: false

  publish:
    needs: release
    if: github.ref_type == 'tag'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: [windows, linux, macos_arm64, macos_x86_64]
    steps:
      - uses: actions/checkout@v4
      - name: Fetch artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.version }}
          path: ./${{ matrix.version }}
      - name: Get release
        id: get_release_info
        uses: leahlundqvist/get-release@v1.3.1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag_name: ${{ github.ref_name }}
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ${{ matrix.version }}/v_${{ matrix.version }}.zip
          asset_name: v_${{ matrix.version }}.zip
          asset_content_type: application/zip
